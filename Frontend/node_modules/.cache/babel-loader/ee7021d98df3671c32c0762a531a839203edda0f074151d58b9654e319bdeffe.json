{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// // Backend URL\n// let backend = 'http://localhost:8000';\n\n// const SaveQuizModal = ({ isOpen, onClose, savedQuizzes }) => {\n\n//   console.log(savedQuizzes)\n//   // State variables\n//   const [selectedTitle, setSelectedTitle] = useState('');\n//   const [newTitle, setNewTitle] = useState('');\n//   const [termsAccepted, setTermsAccepted] = useState(false);\n//   const [quizTitles, setQuizTitles] = useState([]);\n\n//   // Retrieve user profile from local storage\n//   const user = JSON.parse(localStorage.getItem(\"profile-prepGPT\"));\n\n//   // Fetch quiz titles when modal is opened\n//   useEffect(() => {\n//     if (isOpen) {\n//       setSelectedTitle('');\n//       setNewTitle('');\n//       setTermsAccepted(false);\n//       fetchTitles();\n//     }\n//   }, [isOpen]);\n\n//   // Fetch existing quiz titles from the backend\n//   const fetchTitles = async () => {\n//     try {\n//       if (user) {\n//         const response = await axios.get(`${backend}/gpt/getallquiz`, {\n//           params: {\n//             username: user.username\n//           }\n//         });\n//         setQuizTitles(response.data.quizTitles || []);\n//       } else {\n//         console.log(\"Please login\");\n//       }\n//     } catch (error) {\n//       console.error('Error fetching quiz data:', error);\n//     }\n//   };\n\n//   // Close modal if not open\n//   if (!isOpen) return null;\n\n//   // Handle saving the quiz\n//   const handleSave = async () => {\n//     if (user && termsAccepted) {\n//       const titleToSave = selectedTitle === 'new' ? newTitle : selectedTitle;\n\n//       try {\n//         await axios.post(`${backend}/gpt/save-quiz`, { titleToSave, savedQuizzes });\n//         setSelectedTitle('');\n//         setNewTitle('');\n//         setTermsAccepted(false);\n//         onClose();\n//       } catch (error) {\n//         console.error('Error saving quiz:', error);\n//       }\n//     } else {\n//       alert('Please accept the terms of use to save the quiz.');\n//     }\n//   };\n\n//   // Handle quiz title selection change\n//   const handleSelectChange = (e) => {\n//     const value = e.target.value;\n//     setSelectedTitle(value);\n\n//     if (value !== 'new') {\n//       setNewTitle('');\n//     }\n//   };\n\n//   // Render the modal\n//   return (\n//     <div className=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm z-50\">\n//       <div className=\"w-80 rounded-2xl bg-white\">\n//         <div className=\"flex flex-col gap-2 p-8\">\n//           <select\n//             value={selectedTitle}\n//             onChange={handleSelectChange}\n//             className=\"w-full rounded-lg border border-gray-300 bg-white px-4 py-3 focus:outline-none focus:ring-2 focus:ring-gray-700 focus:ring-offset-2 focus:ring-offset-gray-100 mb-4\"\n//           >\n//             <option value=\"\" disabled>Select a saved quiz</option>\n//             {quizTitles.map((quiz, index) => (\n//               <option key={index} value={quiz}>{quiz}</option>\n//             ))}\n//             <option value=\"new\">Create New Quiz</option>\n//           </select>\n//           {selectedTitle === 'new' && (\n//             <input\n//               placeholder=\"Title\"\n//               value={newTitle}\n//               onChange={(e) => setNewTitle(e.target.value)}\n//               className=\"w-full rounded-lg border border-gray-300 bg-white px-4 py-3 focus:outline-none focus:ring-2 focus:ring-gray-700 focus:ring-offset-2 focus:ring-offset-gray-100 mb-4\"\n//             />\n//           )}\n//           <label className=\"flex cursor-pointer items-center justify-between p-1\">\n//             Accept terms of use\n//             <div className=\"relative inline-block\">\n//               <input\n//                 type=\"checkbox\"\n//                 checked={termsAccepted}\n//                 onChange={() => setTermsAccepted(!termsAccepted)}\n//                 className=\"peer h-6 w-12 cursor-pointer appearance-none rounded-full border border-gray-300 bg-white checked:border-gray-900 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-900 focus-visible:ring-offset-2\"\n//               />\n//               <span className=\"pointer-events-none absolute left-1 top-1 block h-4 w-4 rounded-full bg-gray-400 transition-all duration-200 peer-checked:left-7 peer-checked:bg-gray-900\"></span>\n//             </div>\n//           </label>\n//           <button\n//             onClick={handleSave}\n//             className=\"inline-block cursor-pointer rounded-md bg-gray-700 px-4 py-3.5 text-center text-sm font-semibold uppercase text-white transition duration-200 ease-in-out hover:bg-gray-800 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-700 focus-visible:ring-offset-2 active:scale-95\"\n//           >\n//             Save\n//           </button>\n//           <button\n//             onClick={onClose}\n//             className=\"mt-2 inline-block cursor-pointer rounded-md bg-gray-500 px-4 py-3.5 text-center text-sm font-semibold uppercase text-white transition duration-200 ease-in-out hover:bg-gray-600 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-500 focus-visible:ring-offset-2 active:scale-95\"\n//           >\n//             Cancel\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default SaveQuizModal;","map":{"version":3,"names":[],"sources":["/Users/rohit/Documents/Cohere/prepgpt/Frontend/src/Components/QuizGPT/SaveWindow.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// // Backend URL\n// let backend = 'http://localhost:8000';\n\n// const SaveQuizModal = ({ isOpen, onClose, savedQuizzes }) => {\n\n//   console.log(savedQuizzes)\n//   // State variables\n//   const [selectedTitle, setSelectedTitle] = useState('');\n//   const [newTitle, setNewTitle] = useState('');\n//   const [termsAccepted, setTermsAccepted] = useState(false);\n//   const [quizTitles, setQuizTitles] = useState([]);\n\n//   // Retrieve user profile from local storage\n//   const user = JSON.parse(localStorage.getItem(\"profile-prepGPT\"));\n\n//   // Fetch quiz titles when modal is opened\n//   useEffect(() => {\n//     if (isOpen) {\n//       setSelectedTitle('');\n//       setNewTitle('');\n//       setTermsAccepted(false);\n//       fetchTitles();\n//     }\n//   }, [isOpen]);\n\n//   // Fetch existing quiz titles from the backend\n//   const fetchTitles = async () => {\n//     try {\n//       if (user) {\n//         const response = await axios.get(`${backend}/gpt/getallquiz`, {\n//           params: {\n//             username: user.username\n//           }\n//         });\n//         setQuizTitles(response.data.quizTitles || []);\n//       } else {\n//         console.log(\"Please login\");\n//       }\n//     } catch (error) {\n//       console.error('Error fetching quiz data:', error);\n//     }\n//   };\n\n//   // Close modal if not open\n//   if (!isOpen) return null;\n\n//   // Handle saving the quiz\n//   const handleSave = async () => {\n//     if (user && termsAccepted) {\n//       const titleToSave = selectedTitle === 'new' ? newTitle : selectedTitle;\n\n//       try {\n//         await axios.post(`${backend}/gpt/save-quiz`, { titleToSave, savedQuizzes });\n//         setSelectedTitle('');\n//         setNewTitle('');\n//         setTermsAccepted(false);\n//         onClose();\n//       } catch (error) {\n//         console.error('Error saving quiz:', error);\n//       }\n//     } else {\n//       alert('Please accept the terms of use to save the quiz.');\n//     }\n//   };\n\n//   // Handle quiz title selection change\n//   const handleSelectChange = (e) => {\n//     const value = e.target.value;\n//     setSelectedTitle(value);\n\n//     if (value !== 'new') {\n//       setNewTitle('');\n//     }\n//   };\n\n//   // Render the modal\n//   return (\n//     <div className=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm z-50\">\n//       <div className=\"w-80 rounded-2xl bg-white\">\n//         <div className=\"flex flex-col gap-2 p-8\">\n//           <select\n//             value={selectedTitle}\n//             onChange={handleSelectChange}\n//             className=\"w-full rounded-lg border border-gray-300 bg-white px-4 py-3 focus:outline-none focus:ring-2 focus:ring-gray-700 focus:ring-offset-2 focus:ring-offset-gray-100 mb-4\"\n//           >\n//             <option value=\"\" disabled>Select a saved quiz</option>\n//             {quizTitles.map((quiz, index) => (\n//               <option key={index} value={quiz}>{quiz}</option>\n//             ))}\n//             <option value=\"new\">Create New Quiz</option>\n//           </select>\n//           {selectedTitle === 'new' && (\n//             <input\n//               placeholder=\"Title\"\n//               value={newTitle}\n//               onChange={(e) => setNewTitle(e.target.value)}\n//               className=\"w-full rounded-lg border border-gray-300 bg-white px-4 py-3 focus:outline-none focus:ring-2 focus:ring-gray-700 focus:ring-offset-2 focus:ring-offset-gray-100 mb-4\"\n//             />\n//           )}\n//           <label className=\"flex cursor-pointer items-center justify-between p-1\">\n//             Accept terms of use\n//             <div className=\"relative inline-block\">\n//               <input\n//                 type=\"checkbox\"\n//                 checked={termsAccepted}\n//                 onChange={() => setTermsAccepted(!termsAccepted)}\n//                 className=\"peer h-6 w-12 cursor-pointer appearance-none rounded-full border border-gray-300 bg-white checked:border-gray-900 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-900 focus-visible:ring-offset-2\"\n//               />\n//               <span className=\"pointer-events-none absolute left-1 top-1 block h-4 w-4 rounded-full bg-gray-400 transition-all duration-200 peer-checked:left-7 peer-checked:bg-gray-900\"></span>\n//             </div>\n//           </label>\n//           <button\n//             onClick={handleSave}\n//             className=\"inline-block cursor-pointer rounded-md bg-gray-700 px-4 py-3.5 text-center text-sm font-semibold uppercase text-white transition duration-200 ease-in-out hover:bg-gray-800 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-700 focus-visible:ring-offset-2 active:scale-95\"\n//           >\n//             Save\n//           </button>\n//           <button\n//             onClick={onClose}\n//             className=\"mt-2 inline-block cursor-pointer rounded-md bg-gray-500 px-4 py-3.5 text-center text-sm font-semibold uppercase text-white transition duration-200 ease-in-out hover:bg-gray-600 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-500 focus-visible:ring-offset-2 active:scale-95\"\n//           >\n//             Cancel\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default SaveQuizModal;\n"],"mappings":"AAAA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}